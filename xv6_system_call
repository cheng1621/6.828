#System call for XV6.
## Part One: System call tracing

see the line : num = curproc->tf->eax;
the element saves the accumulator response, the process must store the number in the element num when it operates 
any instrutions.

this is the whole code.

void
syscall(void)
{
  int num;
  struct proc *curproc = myproc();
  
  num = curproc->tf->eax;
  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
    curproc->tf->eax = syscalls[num]();
    // rewrite the code.
    switch (num) {
      case SYS_fork:
        cprintf("fork -> ");
        break;
      case SYS_exit:
        cprintf("exit -> ");
        break;
      case SYS_wait:
        cprintf("wait -> ");
        break;
      case SYS_pipe:
        cprintf("pipe -> ");
        break;
      case SYS_read:
        cprintf("read -> ");
        break;
      case SYS_kill:
        cprintf("kill -> ");
        break;
      case SYS_exec:
        cprintf("exec -> ");
        break;
      case SYS_fstat:
        cprintf("fstat -> ");
        break;
      case SYS_chdir:
        cprintf("chdir -> ");
        break;
      case SYS_dup:
        cprintf("dup -> ");
        break;
      case SYS_getpid:
        cprintf("getpid -> ");
        break;
      case SYS_sbrk:
        cprintf("sbrk -> ");
        break;
      case SYS_sleep:
        cprintf("sleep -> ");
        break;
      case SYS_uptime:
        cprintf("uptime -> ");
        break;
      case SYS_open:
        cprintf("open -> ");
        break;
      case SYS_write:
        cprintf("write -> ");
        break;
      case SYS_mknod:
        cprintf("mknod -> ");
        break;
      case SYS_unlink:
        cprintf("unlink -> ");
        break;
      case SYS_link:
        cprintf("link -> ");
        break;
      case SYS_mkdir:
        cprintf("mkdir -> ");
        break;
      case SYS_close:
        cprintf("close -> ");
        break;
      default:
        panic("should never get here\n");
    }
    cprintf("%d\n", curproc->tf->eax);
    }
   else {
    cprintf("%d %s: unknown sys call %d\n",
            curproc->pid, curproc->name, num);
    curproc->tf->eax = -1;
  }
}


## for part two. add function to the system call.
I look around all the library in the xv6 package. we should add something on these files:
syscall.c
  this file is responsible for all the syscall and execute it in other file.

user.h
  this file is responsible for all the system call for user mode.

halt.c
  create, execute it when you type halt in the shell.

sysproc.c
  this file is responsible for the system call process. because halt is to terminate process. we need to implement it in 
  this file'

by the way, I think the proc.c and proc.h is responsible for the basic operatons in the operating system, like
schedule, sleep, exit, fork, some instructions like that.


syscall.h
  define sys_halt to some identical number.
 
  
